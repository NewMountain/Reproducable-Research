?rnorm
library(datasets)
data(iris)
?iris
class(iris)
about(iris)
str(iris)
str(iris$species)
table(iris$species)
table(iris$Species)
flower_data <- iris[iris$Species == "virginica"]
iris$Species == "virginica"
pareser <- iris$Species == "virginica"
flower_data = iris[pareser,]
table(flower_data$Species)
str(flower_data)
mean(flower_data$Sepal.Length)
iris
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$cyl, mtcars$hp), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
dat1 <- sapply(split(mtcars$hp, mtcars$cyl), mean)
dat1[3]-dat1[1]
debug(ls)
n
debug(ls)
ls
n
debug(ls)
ls
library(datasets)
data(iris)
sapply(split(iris$Species,iris.Sepal.Length),mean)
exit
ds
c
sapply(split(iris$Species,iris.Sepal.Length),mean)
str(iris)
sapply(split(iris$Species,iris$Sepal.Length),mean)
sapply(split(iris$Species),mean)
?split
sapply(split(iris$Sepal.Length,iris$Species),mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$hp, mtcars$cyl),mean)
dat <- sapply(split(mtcars$hp, mtcars$cyl),mean)
dat[3]-dat[1]
a <- makeVector(c(1,2,3,4))
?makeVector
install.packages(c("boot", "caTools", "class", "cluster", "codetools", "DBI", "doBy", "dplyr", "ggvis", "gsubfn", "htmltools", "httpuv", "httr", "KernSmooth", "labeling", "Lahman", "magrittr", "MASS", "mgcv", "minqa", "nlme", "quantmod", "Rcpp", "RSQLite", "shiny", "sqldf", "swirl", "testthat", "xlsxjars", "xtable"))
install.packages("arules")
library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("magrittr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("PerformanceAnalytics")
data("AdultUCI")
head(AdultUCI)
View(AdultUCI)
View(AdultUCI)
View(AdultUCI)
Adult = as(AdultUCI,"Transactions")
Adult = as(AdultUCI,"Transactions");
Adult = as(AdultUCI,"transactions");
Adult = as(AdultUCI, "transactions");
?read.transactions
typeCols <- sapply(AdultUCI,class)
TypeColes
TypeCols
typeCOls
typeCols
factCols <- grep('factor',typeCols)
subAdultUCI <- AdultUCI[,factCols]
View(subAdultUCI)
Adult <- as(subAdultUCI,"transactions")
rules <- apriori(Adult)
rules <- apriori(Adult)
inspect(rules)
rules <- apriori(Adult, parameter=list(support=0.01,confidence=0.5))
inspect(head(sort(rules,by="confidence"),20))
plot(rules)
head(quality(rules))
?quality
plot(rules,measure=c("support","lift"),shading="confidence")
install.packages("arulesViz")
library("arulesViz", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
plot(rules)
inspect(head(sort(rules,by="support"),20))
plot(rules, measure=c("support","lift"), shading="confidence");
plot(rules, shading="order", control=list(main ="Two-key plot"));
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
subrules = rules[quality(rules)$confidence > 0.8];
subrules
plot(subrules, shading="order", control=list(main ="Two-key plot"));
quality(rules)
head(quality(rules))
head(length(rules))
head(size(rules))
inspect(head(sort(subrules,by="size"),20))
summary(size(Adult))
test <- as(sort(subrules),"data.frame")
test
size(Adult)
test1 <- as(rules,"data.frame")
?cbind
cbind(test1,size(rules))
test2 <- cbind(test1,size(rules))
?order
name(test22)
name(test2)
names(test2)
test3 <- tbl_df(test2)
?rename
rename(test3, rules = size(rules))
names(test3)
rename(test3, size(rules) = rules)
rename(test3, rules = size(rules))
rename(test3, "rules" = "size(rules)")
names(test3)[5] <- "rules"
names(test3)
head(test3)
names(test3)[5] <- "quant.rules"
head(test3)
arrange(test3,quant.rules,support,confidence,lift)
arrange(test3,-quant.rules,support,confidence,lift)
test3[2:5]
test3 <- arrange(test3,-quant.rules,support,confidence,lift)
test3[2:5]
test3 <- arrange(test3,-quant.rules,-support,-confidence,-lift)
test3[2:5]
test3
?qplot
qplot(test3$support,test3$confidence,color=test3$quant.rules)
qplot(test3$quant.rules,test3$support,color=test3$confidence)
qplot(test3$support,test3$quant.rules,color=test3$confidence)
d <- qplot(test3$support,test3$quant.rules,color=test3$confidence)
library(scales) # for muted
d + scale_colour_gradient2(low="red", high="blue")
d + scale_colour_gradient2(mid="red", high="green")
d + scale_colour_gradient(mid="red", high="green")
d + scale_colour_brewer(palette="Set1")
d + scale_colour_gradient(mid="red", high="green")
d + scale_colour_gradient2(mid="red", high="green")
colfunc <- colorRampPalette(c("red","green")
colfunc(10)
install.packages("colorRamps")
library("colorRamps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
colfunc <- colorRampPalette(c("red","green")
colfunc(10)
?ggplot
d + scale_colour_gradient2(mid="red", high="green")
d <- qplot(test3$support,test3$quant.rules,color=test3$confidence)
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colors=c("red","green"),values=c(0.5,1.0))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colours=c("red","green"),values=c(0.5,1.0))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colours=c("red","green"),values=c(0.3,1.0))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point()
?scale_colour_gradientn
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colours=c("red","green"))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colours=rainbow(7))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point() + scale_colour_gradientn(colours = topo.colors(10))
ggplot(test3,aes(x=support,y=quant.rules)) + geom_point()
d + scale_colour_gradient2(mid="red", high="green")
d + scale_colour_gradient2(low="red", high="green")
d + scale_colour_gradient2(0.5="red", high="green")
d + scale_colour_gradient2(mid="red", high="green")
ggplot(test3,aes(x=support,y=quant.rules), fill=confidence) + geom_point()
ggplot(test3,aes(x=support,y=quant.rules), fill=confidence) + geom_point() + scale_fill_gradient2(colours=c("red","green"))
?scale_fill_gradient2
d + scale_colour_gradient2(midpoint=median(test3$confidence,low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=median(test3$confidence,low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=median(test3$confidence),low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=mean(test3$confidence),low="blue",mid="red", high="green")
d + scale_colour_gradient2(low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=0.5,low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=0.45,low="blue",mid="red", high="green")
d <- qplot(test3$support,test3$confidence,color=test3$quant.rules)
d + scale_colour_gradient2(low="blue",mid="red", high="green")
d <- qplot(test3$quant.rules,test3$support,color=test3$lift)
d + scale_colour_gradient2(low="blue",mid="red", high="green")
d <- qplot(test3$quant.rules,test3$support,color=test3$confidence)
d + scale_colour_gradient2(low="blue",mid="red", high="green")
d + scale_colour_gradient2(midpoint=0.45,low="blue",mid="red", high="green")
filter(test3,quant.rule=6)
?filter
?filter
dplyr::filter(test3,quant.rules-6)
dplyr::filter(test3,quant.rules=6)
test3[2:5]
test3[2:5,quant.rules=6]
test3[2:5,test3$quant.rules=6]
>sort
?sort
dplyr::filter(test3,quant.rules==6)
?unif
?qunif
qunif(0.75,min=0,max=1)
1/.6
1/.4
.6/.4
2.5/1.66666667
.6/.4
1*/1
1*.1
2*.1
2*.2
3*.3
4*.4
0.1+0.4+0.9+1.6
.75*.3
jp <- .75*.3
mp <- jp + (.52*.3)
jp/mp
mp/jp
1/(mp/jp)
setwd("~/Desktop/R/Reproducable Research")
data <- read.csv("activity.csv")
detach("package:arules", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2")
df1 <- tbl_df(data)
library("tidyr")
library("dplyr")
library("ggplot2")
df1 <- tbl_df(data)
df1
sapply(df1,class)
hist_data <- df1 %>%
group_by(date) %>%
summarise(dly.total = sum(steps), na.rm=TRUE)
hist_data
hist_data <- df1 %>%
group_by(date) %>%
summarise(dly.total = sum(steps))
hist_data
plot(hist_data$dly.total)
qplot(dly.total,data=hist_data,geom = "histogram")
more data <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps),
mean = mean(steps),
median = median
)
more data <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps),
mean = mean(steps),
median = median(steps)
)
more data <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps)
##mean = mean(steps),
##median = median(steps)
)
df2 <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps)
##mean = mean(steps),
##median = median(steps)
)
df2 <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps),
mean = mean(steps),
median = median(steps)
)
df2
?median
df2 <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps, na.rm=TRUE),
mean = mean(steps, na.rm=TRUE),
median = median(steps, na.rm=TRUE)
)
df2
df1
head(df1,50)
qplot(df2,plot="l")
df2 <- df1 %>%
group_by(date) %>%
summarise(
total = sum(steps, na.rm=TRUE),
mean = mean(steps, na.rm=TRUE),
median = median(steps, na.rm=TRUE)
)
df2
df1
?tbl_df
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE),
)
df3
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE),
)
df3 <- df1 %>%
group_by(interval) %>%
j
df3 <- df1 %>%
group_by(interval)
df3
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE),
)
summarise(df3,mean=mean(steps))
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE)
)
df3
ggplot() + geom_line(data = df3, aes(x = interval, y = mean))
?max
max(df3$mean)
df3$mean =max(df3$mean)
df3$mean = max(df3$mean)
which.max(df3$mean)
apply(df3,2,which.max)
max(df3$mean)
max(df3)
max(df3$mean)
filter(df3,mean==max(df3$mean))
filter(df3,mean>206)
df3
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE)
)
df3
filter(df3,mean>206)
filter(df3,mean==max(df3$mean))
df1
is.na(df1$steps)
table(is.na(df1$steps))
table(is.na(df1))
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE),
median = median(steps,na.rm=TRUE)
)
df3
df3 <- df1 %>%
group_by(interval) %>%
summarise(
mean = mean(steps, na.rm=TRUE)
)
df3
df1
?weekdays
df1
df1$steps
df3
?match
df1
df3
match(df1$interval,df3$interval)
df1
df3
testVal <- ifelse(is.na(df1$steps),
df3$mean[
match(df1$interval,df3$interval)
],
df1$steps)
cbind(df1$steps,textVal)
cbind(df1$steps,testVal)
x <- cbind(df1$steps,testVal)
tbl_df(x)
head(x)
df3
df1
tail(x)
df1
dfM <- data.frame(steps = testVal,date = df1$date, interval = df1$interval)
tbl_df(dfM)
table(is.na(dfM))
hist_data1 <- dfM %>%
group_by(date) %>%
summarise(dly.total = sum(steps))
qplot(dly.total,data=hist_data1,geom = "histogram")
p1 <- qplot(dly.total,data=hist_data1,geom = "histogram")
p0 <- qplot(dly.total,data=hist_data,geom = "histogram")
multiplot(p0,p1,cols=1)
?multiplot
